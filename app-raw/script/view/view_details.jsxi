static class ViewDetails {
    var _selected, _tagSkip;

    function outMsg(title, msg){
        var dm = $('#details-message'),
            cd = $('#selected-car-details');

        if (title){
            dm.html('<h4>{0}</h4><p>{1}</p>'.format(title, msg)).show();
            cd.hide();
        } else {
            dm.hide();
            cd.show();
        }
    }

    function outErrors(car){
        var er = $('#selected-car-error');
        if (car.error.length > 0){
            er.show().html('Errors:<ul>%0</ul>'(car.error.map(function (e){
                return '<li><a href="#" data-error-id="%0">%1</a></li>'(e.id, e.msg);
            }).join('')));
        } else {
            er.hide();
        }
    }

    function outBadge(car){
        var lo = $('#selected-car-logo');
        if (car.hasError('badge-missing')){
            lo.hide();
        } else {
            lo.show().attr('src', car.badge.cssUrl());
        }
    }

    function outData(car){
        function val(e, s){
            if (typeof e === 'string') e = $(e);
            if (e = e[0]){
                var c = e.value;
                if (!s) s = '';
                if (c != s) e.value = s;
            }

            return e;
        }

        var he = $('#selected-car'),
            de = $('#selected-car-desc'),
            ta = $('#selected-car-tags'),
            pr = $('#selected-car-properties');
        he.attr('title', car.path);
        if (car.data){
            val(he.removeAttr('readonly'), car.data.name);
            val(de.removeAttr('readonly'), car.data.description);
            de.elastic();

            ta.show().find('li').remove();
            car.data.tags.forEach(function (e){
                $('<li>').text(e).insertBefore(this);
            }.bind(ta.find('input')));
            updateTags(car.data.tags);

            pr.show();
            val('#selected-car-brand', car.data.brand);
            val('#selected-car-class', car.data.class);

            val('#selected-car-year', car.data.year);
            val('#selected-car-country', car.data.country);
            val('#selected-car-author', car.data.author ? car.data.author + (car.data.version ? ' (%0)'(car.data.version) : '') : car.data.version).title = car.data.url || '';

            val('#selected-car-bhp', car.data.specs.bhp);
            val('#selected-car-torque', car.data.specs.torque);
            val('#selected-car-weight', car.data.specs.weight);
            val('#selected-car-topspeed', car.data.specs.topspeed);
            val('#selected-car-acceleration', car.data.specs.acceleration);
            val('#selected-car-pwratio', car.data.specs.pwratio);

            updateParents(car);

            if (car.parent && !car.hasError('upgrade-missing')){
                $('#selected-car-upgrade').show().attr('src', car.upgrade);
            } else {
                $('#selected-car-upgrade').hide();
            }
        } else {
            he.attr('readonly', true).val(car.id);
            de.attr('readonly', true).val('');
            ta.hide();
            pr.hide();
        }
    }

    function outSfxOriginal(car){
        var s = document.getElementById('selected-car-sound');
        if (!s) return;

        s.value = car.originalSfxDisplayName;
        s.parentNode.style.display = car.originalSfx ? null : 'none';
    }

    function outDisabled(car){
        $('#selected-car-disable').text(car.disabled ? 'Enable' : 'Disable');
        $('#selected-car-header').toggleClass('disabled', car.disabled)
    }

    function outChanged(car){
        $('#selected-car-header').toggleClass('changed', car.changed)
    }

    function outSkins(car){
        if (!car.skins || !car.skins[0]){
            $('#selected-car-skins-article').hide();
            return;
        }

        if (!car.selectedSkin){
            car.selectSkin(car.skins[0].id);
            return;
        }

        setTimeout(function (){
            if (car !== _selected) return;

            var sa = $('#selected-car-skins-article'),
                sp = $('#selected-car-preview'),
                ss = $('#selected-car-skins');
            if (car.skins && car.skins[0] && car.selectedSkin){
                sa.show();
                ss.empty();

                sp.attr({
                    'data-id': car.selectedSkin.id,
                    'src': (car.selectedSkin.preview + '?' + Math.random()).cssUrl()
                });

                car.skins.forEach(function (e){
                    var i = $('<img>').attr({
                        'data-id': e.id,
                        'title': e.displayName,
                        'src': e.livery.cssUrl()
                    }).appendTo(ss);
                    if (e === car.selectedSkin){
                        i.addClass('selected');
                    }
                });
            } else {
                sa.hide();
            }
        }, 50);
    }

    function updateParents(car){
        // TODO: optimization
        var s = document.getElementById('selected-car-parent');
        if (!s) return;

        if (car.children.length > 0){
            s.parentNode.style.display = 'none';
        } else {
            s.parentNode.style.display = null;

            s.innerHTML = '<option value="">None</option>' + Cars.list.filter(function (e){
                return e.data && !e.disabled && e.parent == null && e.id != car.id && (!car.parent || car.parent.id != car.id);
            }).map(function (e){
                return '<option value="{0}">{1}</option>'.format(e.id, e.data.name);
            }).join('');

            s.value = car.parent && car.parent.id || '';
        }
    }

    function updateTags(l){
        // TODO: optimization
        var t = document.getElementById('tags-filtered');
        if (t){
            document.body.removeChild(t);
        }

        t = document.body.appendChild(document.createElement('datalist'));
        t.id = 'tags-filtered';

        var n = l.map(function (e){
            return e.toLowerCase();
        });

        Cars.tags.forEach(function (v){
            if (n.indexOf(v.toLowerCase()) < 0){
                t.appendChild(document.createElement('option')).setAttribute('value', v);
            }
        });
    }

    function applyTags(){
        if (!_selected || !_selected.data) return;
        Cars.changeData(_selected, 'tags', [].map.call(
            document.querySelectorAll('#selected-car-tags li'), function (a){ return a.textContent }));
        updateTags(_selected.data.tags);
    }

    function init(){
        Cars
            .on('scan:ready', function (list){
                if (list.length == 0){
                    outMsg('Hmm...', 'Cars not found');
                }

                $('main').show();
            })
            .on('error', function (car){
                if (_selected != car) return;
                outErrors(car);
            })
            .on('update.car.badge', function (car){
                if (_selected != car) return;
                outBadge(car);
            })
            .on('update.car.data', function (car){
                if (_selected != car) return;
                outData(car);
            })
            .on('update.car.sfx:original', function (car){
                if (_selected != car) return;
                outSfxOriginal(car);
            })
            .on('update.car.skins', function (car){
                if (_selected != car) return;
                outSkins(car);
            })
            .on('update.car.disabled', function (car){
                if (_selected != car) return;
                outDisabled(car);
            })
            .on('update.car.changed', function (car){
                if (_selected != car) return;
                outChanged(car);
            });

        ViewList
            .on('select', function (car){
                $('main').show();

                _selected = car;
                car.loadEnsure();

                if (car){
                    outMsg(null);
                } else {
                    return;
                }

                outData(car);
                outSfxOriginal(car);
                outBadge(car);
                outDisabled(car);
                outChanged(car);
                outErrors(car);
                outSkins(car);

                $('#selected-car-update-data').attr('disabled', car && Cars.databaseContains(car.id) ? null : true);
            });

        /* inputs */
        $('#selected-car')
            .on('keydown', function (e){
                if (e.keyCode == 13){
                    this.blur();
                    return false;
                }
            })
            .on('change', function (){
                if (!_selected || this.readonly || !this.value) return;
                this.value = this.value.slice(0, 64);
                Cars.changeData(_selected, 'name', this.value);
            });

        $('#selected-car-tags')
            .on('click', function (e){
                if (e.target.tagName === 'LI' && e.target.offsetWidth - e.offsetX < 20){
                    e.target.parentNode.removeChild(e.target);
                    applyTags();
                } else {
                    this.querySelector('input').focus();
                }
            })
            .on('contextmenu', function (e){
                if (!_selected || !_selected.data) return;
                if (e.target.tagName !== 'LI') return;

                var menu = new gui.Menu();
                menu.append(new gui.MenuItem({ label: 'Filter Tag', key: 'F', click: function (){
                    if (!_selected) return;
                    ViewList.addFilter('tag:%0'(e.target.textContent));
                } }));

                menu.popup(e.clientX, e.clientY);
                return false;
            });

        $('#selected-car-tags input')
            .on('change', function (){
                if (this.value){
                    this.parentNode.insertBefore(document.createElement('li'), this).textContent = this.value;
                    this.value = '';
                    applyTags();
                }
            })
            .on('keydown', function (e){
                if (e.keyCode == 8 && this.value == ''){
                    this.parentNode.removeChild(this.parentNode.querySelector('li:last-of-type'));
                    applyTags();
                }
            });

        $('#selected-car-desc').elastic()
            .on('change', function (){
                if (!_selected || this.readonly) return;
                Cars.changeData(_selected, 'description', this.value);
            });

        $('#selected-car-brand')
            .on('keydown', function (e){
                if (e.keyCode == 13){
                    this.blur();
                    return false;
                }
            })
            .on('change', function (e){
                if (!_selected || this.readonly || !this.value) return;
                Cars.changeData(_selected, 'brand', this.value);
            })
            .on('contextmenu', function (e){
                if (!_selected || !_selected.data) return;

                var menu = new gui.Menu();
                menu.append(new gui.MenuItem({ label: 'Filter Brand', key: 'F', click: function (){
                    if (!_selected) return;
                    ViewList.addFilter('brand:%0'(_selected.data.brand));
                } }));

                menu.popup(e.clientX, e.clientY);
                return false;
            });

        $('#selected-car-class')
            .on('keydown', function (e){
                if (e.keyCode == 13){
                    this.blur();
                    return false;
                }
            })
            .on('change', function (){
                if (!_selected || this.readonly) return;
                Cars.changeData(_selected, 'class', this.value);
            })
            .on('contextmenu', function (e){
                if (!_selected || !_selected.data || !_selected.data.class) return;

                var menu = new gui.Menu();
                menu.append(new gui.MenuItem({ label: 'Filter Class', key: 'F', click: function (){
                    if (!_selected) return;
                    ViewList.addFilter('class:%0'(_selected.data.class));
                } }));

                menu.popup(e.clientX, e.clientY);
                return false;
            });

        $('#selected-car-year')
            .on('keydown', function (e){
                if (e.keyCode == 13){
                    this.blur();
                    return false;
                }

                if (e.keyCode == 37){
                    this.value = +this.value + 1;
                    return false;
                }

                if (e.keyCode == 39){
                    this.value = +this.value - 1;
                    return false;
                }
            })
            .on('change', function (){
                if (!_selected || this.readonly) return;
                Cars.changeData(_selected, 'year', this.value);
            })
            .on('contextmenu', function (e){
                if (!_selected || !_selected.data || !_selected.data.year) return;

                var menu = new gui.Menu();
                menu.append(new gui.MenuItem({ label: 'Filter Year', key: 'F', click: function (){
                    if (!_selected) return;
                    ViewList.addFilter('year:%0'(_selected.data.year));
                } }));
                menu.append(new gui.MenuItem({ label: 'Filter Decade', click: function (){
                    if (!_selected) return;
                    ViewList.addFilter('year:%0'(('' + _selected.data.year).slice(0, -1) + '?'));
                } }));

                menu.popup(e.clientX, e.clientY);
                return false;
            });

        $('#selected-car-country')
            .on('keydown', function (e){
                if (e.keyCode == 13){
                    this.blur();
                    return false;
                }
            })
            .on('change', function (){
                if (!_selected || this.readonly) return;
                Cars.changeData(_selected, 'country', this.value);
            })
            .on('contextmenu', function (e){
                if (!_selected || !_selected.data || !_selected.data.country) return;

                var menu = new gui.Menu();
                menu.append(new gui.MenuItem({ label: 'Filter Country', key: 'F', click: function (){
                    if (!_selected) return;
                    ViewList.addFilter('country:%0'(_selected.data.country));
                } }));

                menu.popup(e.clientX, e.clientY);
                return false;
            });

        $('#selected-car-parent')
            .on('change', function (e){
                if (!_selected) return;

                var t = this, v = this.value || null;
                if (v && !fs.existsSync(_selected.upgrade)){
                    UpgradeEditor.start(_selected, lambda {
                        if (fs.existsSync(_selected.upgrade)){
                            fn();
                        } else {
                            t.value = '';
                        }
                    });
                } else {
                    fn();
                }

                function fn(){
                    _selected.changeParent(v);
                }
            });

        $('#selected-car-author')
            .on('click', function (){
                if (!_selected || !_selected.data) return;

                var a, v, u;

                var d = new Dialog('In-Game Car Model', [
                    '<label>Author: <input id="car-details-edit-author" autocomplete list="authors" placeholder="?" value="%0"></label>'(_selected.data.author || '')
                    '<label>Version: <input id="car-details-edit-version" placeholder="?" value="%0"></label>'(_selected.data.version || '')
                    '<label>URL: <input id="car-details-edit-url" placeholder="?" value="%0"></label>'(_selected.data.url || '')
                ], function (){
                    if (!_selected) return;
                    if (a != null) _selected.changeData('author', a);
                    if (v != null) _selected.changeData('version', v);
                    if (u != null) _selected.changeData('url', u);
                });

                d.content.find('#car-details-edit-author').change(lambda a = this.value);
                d.content.find('#car-details-edit-version').change(lambda v = this.value);
                d.content.find('#car-details-edit-url').change(lambda u = this.value);
            })
            .on('dblclick', function (){
                if (!_selected || !_selected.data || !_selected.data.url) return;
                Shell.openItem(_selected.data.url);
            })
            .on('contextmenu', function (e){
                if (!_selected || !_selected.data || !_selected.data.author) return;

                var menu = new gui.Menu();
                menu.append(new gui.MenuItem({ label: 'Filter Author', key: 'F', click: function (){
                    if (!_selected) return;
                    ViewList.addFilter('author:%0'(_selected.data.author));
                } }));

                menu.popup(e.clientX, e.clientY);
                return false;
            });

        [ 'bhp', 'torque', 'weight', 'topspeed', 'acceleration', 'pwratio' ].forEach(function (e){
            $('#selected-car-' + e).on('keydown', function (e){
                if (e.keyCode == 13){
                    this.blur();
                    return false;
                }
            }).on('keyup keydown keypress', function (e){
                if (e.keyCode == 32){
                    e.stopPropagation();
                    if (e.type === 'keyup'){
                        return false;
                    }
                }
            }).on('change', function (){
                if (!_selected || this.readonly) return;
                Cars.changeDataSpecs(_selected, e, this.value);
            });
        });

        $('#selected-car-pwratio')
            .on('dblclick contextmenu', function (e){
                if (!_selected || !_selected.data || this.readonly) return;

                function r(){
                    if (!_selected || this.readonly) return;
                    _selected.recalculatePwRatio();
                }

                if (e.type === 'dblclick'){
                    r();
                } else {
                    var menu = new gui.Menu();
                    menu.append(new gui.MenuItem({ label: 'Recalculate', key: 'R', click: r }));
                    menu.popup(e.clientX, e.clientY);
                    return false;
                }
            });

        /* bagde, upgrade */
        $('#selected-car-logo')
            .on('click', function (){
                if (!_selected) return;
                BadgeEditor.start(_selected);
            });
            
        $('#selected-car-upgrade')
            .on('click', function (){
                if (!_selected) return;
                UpgradeEditor.start(_selected);
            });

        /* previews */
        $('#selected-car-skins-article')
            .dblclick(function (e){
                if (!_selected) return;
                AcShowroom.start(_selected);
            })
            .on('contextmenu', function (e){
                if (!_selected) return;

                var id = e.target.getAttribute('data-id');
                if (!id) return;

                var menu = new gui.Menu();

                menu.append(new gui.MenuItem({ label: 'Open in Showroom', key: 'S', click: function (){
                    if (!_selected) return;
                    AcShowroom.start(_selected, id);
                } }));

                menu.append(new gui.MenuItem({ label: 'Open in Custom Showroom (Experimental)', click: function (){
                    if (!_selected) return;
                    try {
                        AcTools.Kn5Render.Utils.Kn5RenderWrapper.StartDarkRoomPreview(_selected.path, id);
                    } catch (err){
                        ErrorHandler.handled('Cannot start Custom Showroom.', err);
                        return;
                    }
                } }));

                var driveMenu = new gui.MenuItem({ label: 'Drive', submenu: new gui.Menu() });
                menu.append(driveMenu);
                driveMenu = driveMenu.submenu;

                driveMenu.append(new gui.MenuItem({ label: 'Practice', click: function (){
                    AcPractice.start(_selected, id, 'Practice');
                } }));

                driveMenu.append(new gui.MenuItem({ label: 'Hotlap', click: function (){
                    AcPractice.start(_selected, id, 'Hotlap');
                } }));

                driveMenu.append(new gui.MenuItem({ label: 'Race', click: function (){
                    AcPractice.start(_selected, id, 'Race');
                } }));

                driveMenu.append(new gui.MenuItem({ label: 'Drift', click: function (){
                    AcPractice.start(_selected, id, 'Drift');
                } }));

                menu.append(new gui.MenuItem({ label: 'Folder', click: function (){
                    if (!_selected) return;
                    Shell.openItem(_selected.getSkin(id).path);
                } }));

                menu.append(new gui.MenuItem({ type: 'separator' }));

                var autoUpdateLivery = new gui.MenuItem({ label: 'Update Livery', submenu: new gui.Menu() });
                menu.append(autoUpdateLivery);
                autoUpdateLivery = autoUpdateLivery.submenu;

                autoUpdateLivery.append(new gui.MenuItem({ label: 'From Preview', click: function (){
                    if (!_selected) return;
                    var skin = _selected.getSkin(id);
                    try {
                        AcTools.Utils.ImageUtils.GenerateLivery(skin.preview, skin.livery);
                        _selected.loadSkins();
                    } catch (err){
                        ErrorHandler.handled('Cannot update livery.', err);
                        return;
                    }
                } }));

                autoUpdateLivery.append(new gui.MenuItem({ label: 'With Custom Showroom', click: function (){
                    if (!_selected) return;
                    var skin = _selected.getSkin(id);
                    try {
                        AcTools.Kn5Render.Utils.Kn5RenderWrapper.GenerateLivery(_selected.path, skin.id, skin.livery);
                        _selected.loadSkins();
                    } catch (err){
                        ErrorHandler.handled('Cannot update livery.', err);
                        return;
                    }
                } }));

                menu.append(new gui.MenuItem({ label: 'Delete skin', click: function (){
                    if (!_selected) return;
                    var skin = _selected.getSkin(id);

                    new Dialog('Delete %0'(skin.displayName), 'Folder will be removed to the Recycle Bin. Are you sure?', lambda {
                        if (!skin) return;
                        AcTools.Utils.FileUtils.Recycle(skin.path);
                        _selected.loadSkins();
                    });
                } }));

                // menu.append(new gui.MenuItem({ label: 'Livery Editor', enabled: false }));
                // menu.append(new gui.MenuItem({ label: 'Skin Editor', enabled: false }));

                menu.popup(e.clientX, e.clientY);
                return false;
            });

        /* skins changer */
        $('#selected-car-skins')
            .on('click', function (e){
                if (!_selected) return;

                var id = e.target.getAttribute('data-id');
                if (!id) return;

                _selected.selectSkin(id);
            });

        /* errors */
        $('#selected-car-error').click(function (e){
            if (!_selected) return;
            var id = e.target.getAttribute('data-error-id');
            if (id){
                RestorationWizard.fix(_selected, id);
            }
        });

        /* global hotkeys */
        $(window)
            .on('keydown', function (e){
                if (!_selected) return;

                if (e.keyCode === 'S'.charCodeAt(0) && e.ctrlKey && e.altKey){
                    AcShowroom.shot(_selected, true);
                    return false;
                }

                if (e.keyCode === 'D'.charCodeAt(0) && e.ctrlKey && e.altKey){
                    try {
                        AcTools.Kn5Render.Utils.Kn5RenderWrapper.UpdateAmbientShadows(_selected.path);
                    } catch (err){
                        ErrorHandler.handled('Cannot update shadows.', err);
                        return;
                    }
                    return false;
                }

                if (e.keyCode === 'A'.charCodeAt(0) && e.ctrlKey && e.altKey){
                    try {
                        AcTools.Kn5Render.Utils.Kn5RenderWrapper.UpdateAmbientShadows(_selected.path);
                    } catch (err){
                        ErrorHandler.handled('Cannot update shadows.', err);
                        return;
                    }
                    AcShowroom.shot(_selected, true);
                    return false;
                }

                if (e.keyCode === 'S'.charCodeAt(0) && e.ctrlKey){
                    $(':focus').each(lambda this.blur());
                    _selected.save();
                    return false;
                }

                if (e.keyCode === 'F'.charCodeAt(0) && e.ctrlKey){
                    UpdateDescription.update(_selected);
                    return false;
                }

                if (e.keyCode === 'T'.charCodeAt(0) && e.ctrlKey){
                    _selected.toggle();
                    return false;
                }

                if (e.keyCode === 'B'.charCodeAt(0) && e.ctrlKey && e.shiftKey){
                    $('#selected-car-logo')[0].click();
                    return false;
                }

                if (e.keyCode === 'U'.charCodeAt(0) && e.ctrlKey && e.shiftKey){
                    if (_selected.parent) $('#selected-car-upgrade')[0].click();
                    return false;
                }

                if (localStorage.developerMode && e.keyCode === 'E'.charCodeAt(0) && e.ctrlKey && e.shiftKey){
                    _selected.exportDatabase();
                    return false;
                }
            });

        /* bottom toolbar */
        var cmIgnore = false;
        $('main')
            .on('contextmenu', function (){
                this.querySelector('footer').classList.toggle('active');
                cmIgnore = true;
            });

        $(window)
            .on('click contextmenu', function (e){
                if (cmIgnore){
                    cmIgnore = false;
                } else if (e.target !== this){
                    this.classList.remove('active');
                }
            }.bind($('main footer')[0]));

        /* first row */
        $('#selected-car-open-directory').click(function (){
            if (!_selected) return;
            Shell.openItem(_selected.path);
        });

        $('#selected-car-showroom').click(function (){
            if (!_selected) return;
            AcShowroom.start(_selected);
        });

        $('#selected-car-showroom-select').click(function (){
            if (!_selected) return;
            AcShowroom.select(_selected);
        });

        $('#selected-car-practice').click(function (){
            if (!_selected) return;
            AcPractice.start(_selected);
        });

        $('#selected-car-practice-select').click(function (){
            if (!_selected) return;
            AcPractice.select(_selected);
        });

        $('#selected-car-reload').click(function (){
            if (!_selected) return;

            if (_selected.changed){
                new Dialog('Reload', [
                    'Your changes will be lost. Are you sure?'
                ], reload);
            } else {
                reload();
            }

            function reload(){
                if (!_selected) return;
                _selected.reload();
            }
        });

        $('#selected-car-test').click(function (){
            if (!_selected) return;
            _selected.testAcd();
        });

        /* second row */
        $('#selected-car-save').click(function (){
            if (!_selected) return;
            _selected.save();
        });

        $('#selected-car-update-data').click(function (){
            if (!_selected) return;

            var updated = Cars.fromDatabase(_selected.id);
            if (!updated){
                return Notification.warn('Error', 'Data is missing.');
            }

            var fields = [];
            for (var k, v in-object updated){
                if (JSON.stringify(v) === JSON.stringify(_selected.data[k])){
                    continue;
                }

                fields.push({ key: k, value: v });
            }

            if (fields.length === 0){
                return Notification.warn('Error', 'Nothing to update.');
            }

            var d = new Dialog('Update Data', [
                '<h6>Select fields to update</h6>',
                fields.map(lambda 
                    '<label><input data-key="%0" type="checkbox" checked>%1</label>'(arg.key, arg.key === 'url' ? 'URL' : arg.key[0].toUpperCase() + arg.key.slice(1).replace(/(?=[A-Z])/g, ' '))
                ).join('')
            ], function (){
                if (!_selected) return;

                this.content.find(':checked').each(lambda {
                    var k = this.getAttribute('data-key');
                    _selected.changeData(k, updated[k], true);
                });
            });
        });

        $('#selected-car-update-description').click(function (){
            if (!_selected) return;
            UpdateDescription.update(_selected);
        });

        $('#selected-car-update-previews').click(function (){
            if (!_selected) return;
            AcShowroom.shot(_selected);
        });

        $('#selected-car-update-previews-manual').click(function (){
            if (!_selected) return;
            AcShowroom.shot(_selected, true);
        });

        $('#selected-car-disable').click(function (){
            if (!_selected) return;
            _selected.toggle();
        });

        $('#selected-car-additional').on('click contextmenu', function (e){
            if (!_selected) return;

            var menu = new gui.Menu();

            function add(label, fn, to = menu){
                to.append(new gui.MenuItem({ label: label, click: function (){
                    $('main footer').removeClass('active');
                    if (_selected) fn();
                } }));
            }

            add('Update Ambient Shadows', function (){
                try {
                    AcTools.Kn5Render.Utils.Kn5RenderWrapper.UpdateAmbientShadows(_selected.path);
                } catch (err){
                    ErrorHandler.handled('Cannot update shadows.', err);
                    return;
                }
            });

            add('Change Body Ambient Shadow Size', function (){
                var currentSize = AcTools.Kn5Render.Utils.Kn5RenderWrapper.GetBodyAmbientShadowSize(_selected.path).split(',');
                var d = new Dialog('Body Ambient Shadow', [
                    '<h6>Size (in meters)</h6>',
                    '<label style="display:inline-block;width:160px;line-height:24px">Width: <input id="body-ambient-shadow-width" type="number" step="0.1" min="0.8" max="6.0" style="width: 80px;float: right;margin-right: 20px;"></label>',
                    '<label style="display:inline-block;width:160px;line-height:24px">Length: <input id="body-ambient-shadow-height" type="number" step="0.1" min="0.8" max="6.0" style="width: 80px;float: right;margin-right: 20px;"></label>',
                ], function (){
                    var w = +d.content.find('#body-ambient-shadow-width').val();
                    if (Number.isNaN(w)) w = currentSize[0];

                    var h = +d.content.find('#body-ambient-shadow-height').val();
                    if (Number.isNaN(h)) h = currentSize[1];

                    AcTools.Kn5Render.Utils.Kn5RenderWrapper.SetBodyAmbientShadowSize(_selected.path, w, h);
                });

                d.content.find('#body-ambient-shadow-width').val(currentSize[0]);
                d.content.find('#body-ambient-shadow-height').val(currentSize[1]);
            });

            add('Fix LR/HR nodes', function (){
                try {
                    AcTools.Utils.Kn5Fixer.FixLrHrNodes(AcDir.root, _selected.id);
                } catch (err){
                    ErrorHandler.handled('Cannot fix car.', err);
                    return;
                }
            });

            add('Fix blurred wheels', function (){
                try {
                    AcTools.Utils.Kn5Fixer.FixBlurredWheels(AcDir.root, _selected.id);
                } catch (err){
                    ErrorHandler.handled('Cannot fix car.', err);
                    return;
                }
            });

            if (localStorage.developerMode){
                var devMenu = new gui.MenuItem({ label: 'Developer Tools', submenu: new gui.Menu() });
                menu.append(devMenu);
                devMenu = devMenu.submenu;

                add('Export to database', function (){
                    _selected.exportDatabase();
                }, devMenu);

                add('Fix SUSP_XX error', function (){
                    try {
                        AcTools.Utils.Kn5Fixer.FixSuspension(AcDir.root, _selected.id);
                    } catch (err){
                        ErrorHandler.handled('Cannot fix car.', err);
                        return;
                    }
                }, devMenu);

                add('Unpack KN5', function (){
                    try {
                        var kn5 = AcTools.Kn5File.Kn5.FromFile(AcTools.Utils.FileUtils.GetMainCarFile(AcDir.root, _selected.id));
                        var dest = _selected.path + '/unpacked';
                        if (fs.existsSync(dest)) AcTools.Utils.FileUtils.Recycle(dest);
                        kn5.ExportDirectory(dest, false);
                        if (kn5.RootNode != null) {
                            kn5.Export(AcTools.Kn5File.Kn5.ExportType.Collada, dest + '/model.dae');
                        }
                        Shell.openItem(dest);
                    } catch (err){
                        ErrorHandler.handled('Failed.', err);
                    }
                }, devMenu);

                if (fs.existsSync(_selected.path + '/unpacked')) add('Repack KN5', function (){
                    try {
                        var kn5 = AcTools.Kn5File.Kn5.FromDirectory(_selected.path + '/unpacked', false);
                        var dest = AcTools.Utils.FileUtils.GetMainCarFile(AcDir.root, _selected.id);
                        if (fs.existsSync(dest)) AcTools.Utils.FileUtils.Recycle(dest);
                        kn5.Save(dest, false);
                    } catch (err){
                        ErrorHandler.handled('Failed.', err);
                    }
                }, devMenu);

                if (fs.existsSync(_selected.path + '/data.acd')) add('Unpack data', function (){
                    try {
                        var source = _selected.path + '/data.acd';
                        var acd = AcTools.AcdFile.Acd.FromFile(source);
                        var dest = _selected.path + '/data';
                        if (fs.existsSync(dest)) AcTools.Utils.FileUtils.Recycle(dest);
                        acd.ExportDirectory(dest);
                        Shell.openItem(dest);
                        AcTools.Utils.FileUtils.Recycle(source);
                    } catch (err){
                        ErrorHandler.handled('Failed.', err);
                    }
                }, devMenu);

                if (fs.existsSync(_selected.path + '/data')) add('Pack data', function (){
                    try {
                        var source = _selected.path + '/data';
                        var acd = AcTools.AcdFile.Acd.FromDirectory(source);
                        var dest = _selected.path + '/data.acd';
                        if (fs.existsSync(dest)) AcTools.Utils.FileUtils.Recycle(dest);
                        acd.Save(dest);
                        AcTools.Utils.FileUtils.Recycle(source);
                    } catch (err){
                        ErrorHandler.handled('Failed.', err);
                    }
                }, devMenu);
            }

            add('Delete car', function (){
                new Dialog('Delete %0'(_selected.displayName), 'Folder will be removed to the Recycle Bin. Are you sure?', lambda {
                    if (!_selected) return;
                    Cars.remove(_selected);
                });
            });

            menu.popup(e.clientX, e.clientY);
            return false;
        });
    }

    {
        $(init);
    }
}