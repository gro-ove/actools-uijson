static class ViewList {
    var mediator = new Mediator();

    var _selected,
        _aside = $(document.getElementsByTagName('aside')[0]),
        _node = $(document.getElementById('cars-list'));

    private scrollToSelected(){
        var n = _node[0].querySelector('.selected');
        if (!n) return;

        while (n && n.parentNode !== _node[0])
            n = n.parentNode;

        var p = n.offsetTop - n.parentNode.scrollTop;
        if (p < 50){
            n.parentNode.scrollTop += p - 50;
        } else if (p > n.parentNode.offsetHeight - 80){
            n.parentNode.scrollTop += p + 80 - n.parentNode.offsetHeight;
        }
    }

    public select(car){
        _selected = car;
        _node.find('.expand').removeClass('expand');
        _node.find('.selected').removeClass('selected');

        if (car){
            localStorage.selectedCar = car.id;

            var n = _node.find('[data-id="%0"]'(car.id)).addClass('expand').parent().addClass('selected')[0];
            if (car.parent){
                n = _node.find('[data-id="%0"]'(car.parent.id)).addClass('expand')[0];
            }

            scrollToSelected();
        }

        mediator.dispatch('select', car);
    }

    public selectNear(d){
        if (!_selected) return select(Cars.list[0]);

        var n = _node[0].querySelectorAll('[data-id]');
        for (var p, i = 0; i < n.length; i++){
            if (n[i].getAttribute('data-id') === _selected.id){
                p = i;
                break;
            }
        }

        if (p == null) return;
        var j = n[(p + d + n.length) % n.length].getAttribute('data-id');
        select(Cars.byName(j));
    }

    public filter(v){
        var i = _aside.find('#cars-list-filter')[0];
        if (i.value != v){
            i.value = v;
        }

        if (v){
            i.style.display = 'block';

            var s = v.trim().split(/\s+/);
            var bb = '', cc = '';

            var vv = s.filter(function (e){
                if (/^brand:(.*)/.test(e)){
                    bb = (bb && bb + '|') + RegExp.$1;
                    return false;
                }

                if (/^class:(.*)/.test(e)){
                    cc = (cc && cc + '|') + RegExp.$1;
                    return false;
                }

                return true;
            });

            var r = RegExp.fromQuery(vv.join(' '));
            var b = bb && RegExp.fromQuery(bb, true); 
            var c = cc && RegExp.fromQuery(cc, true); 

            var f = function (car){
                if (b && (!car.data || !b.test(car.data.brand))) return false;
                if (c && (!car.data || !c.test(car.data.class))) return false;
                return r.test(car.id) || car.data && r.test(car.data.name);
            };

            _aside.find('#cars-list > div > [data-id]').each(function (){
                this.parentNode.style.display = f(Cars.byName(this.getAttribute('data-id'))) ? null : 'none';
            });
        } else {
            i.style.display = 'hide';
            _aside.find('#cars-list > div').show();
        }
    }

    public addFilter(v){
        var a = _aside.find('#cars-list-filter')[0].value;
        filter((a && a + ' ') + v);
    }

    private _sortFn = {
        id: lambda (a, b) !a.disabled && b.disabled ? -1 : 
            a.disabled && !b.disabled ? 1 : a.id.localeCompare(b.id)

        displayName: lambda (a, b) !a.disabled && b.disabled ? -1 : 
            a.disabled && !b.disabled ? 1 : a.displayName.localeCompare(b.displayName)
    };

    public sort(){
        var c = Cars.list.sort(_sortFn.displayName);
        var n = _node[0];
        var a = n.children;

        c.forEach(lambda {
            for (var s in-array a){
                if (s.children[0].getAttribute('data-id') == arg.id){
                    n.appendChild(s);
                    return;
                }
            }
        });

        scrollToSelected();
    }

    function init(){
        Cars
            .on('scan:start', function (){
                _aside.find('#cars-list').empty();
                document.body.removeChild(_aside[0]);
            })
            .on('scan:ready', function (list){
                $('#total-cars').val(list.filter(function (e){
                    return e.parent == null;
                }).length).attr('title', 'Including modded versions: {0}'.format(list.length));

                sort();
                document.body.appendChild(_aside[0]);

                if (list.length > 0){
                    select(Cars.byName(localStorage.selectedCar) || list[0]);
                }
            })
            .on('new.car', function (car){
                var s = document.createElement('span');
                s.textContent = car.displayName;
                if (car.disabled) s.classList.add('disabled');

                s.setAttribute('title', car.path);
                s.setAttribute('data-id', car.id);
                s.setAttribute('data-name', car.id);
                s.setAttribute('data-path', car.path);

                var d = document.createElement('div');
                d.appendChild(s);

                if (car.children.length > 0){
                    d.setAttribute('data-children', car.children.length + 1);
                }

                _node[0].appendChild(d);
            })
            .on('update.car.data', function (car, upd){
                _node.find('[data-id="%0"]'(car.id))
                    .text(car.displayName).attr('data-name', car.displayName.toLowerCase());
                filter(_aside.find('#cars-list-filter').val());

                if (upd === 'update.car.data:name'){
                    sort();
                }
            })
            .on('update.car.parent', function (car){
                var d = _node[0].querySelector('[data-id="%0"]'(car.id)).parentNode;
                if (car.error.length > 0){
                    var c = d.parentNode;
                    if (c.tagName === 'DIV' && c.querySelectorAll('.error').length == 1){
                        c.classList.remove('error');
                    }
                }

                if (car.parent){
                    var p = _node[0].querySelector('[data-id="%0"]'(car.parent.id)).parentNode;
                    p.appendChild(d);
                    if (d.classList.contains('error')){
                        d.classList.remove('error');
                        p.classList.add('error');
                    }
                } else {
                    _node[0].appendChild(d);
                    sort();
                }

                scrollToSelected();
            })
            .on('update.car.children', function (car){
                var e = _node[0].querySelector('[data-id="%0"]'(car.id));
                if (!e) return;
                if (car.children.length){
                    e.parentNode.setAttribute('data-children', car.children.length + 1);
                } else {
                    e.parentNode.removeAttribute('data-children');
                }
            })
            .on('update.car.path', function (car){
                var e = _node[0].querySelector('[data-id="%0"]'(car.id));
                if (!e) return;
                e.setAttribute('data-path', car.path);
                e.setAttribute('title', car.path);
            })
            .on('update.car.disabled', function (car){
                var e = _node[0].querySelector('[data-id="%0"]'(car.id));
                if (!e) return;
                if (car.disabled){
                    e.classList.add('disabled');
                } else {
                    e.classList.remove('disabled');
                }

                sort();
            })
            .on('update.car.changed', function (car){
                var e = _node[0].querySelector('[data-id="%0"]'(car.id));
                if (!e) return;
                if (car.changed){
                    e.classList.add('changed');
                } else {
                    e.classList.remove('changed');
                }
            })
            .on('error', function (car){
                var e = _node[0].querySelector('[data-id="%0"]'(car.id));
                if (!e) return;
                
                if (car.error.length > 0){
                    e.classList.add('error');
                } else {
                    e.classList.remove('error');
                }

                while (e.parentNode.id !== 'cars-list'){
                    e = e.parentNode;
                }

                if (car.error.length > 0){
                    e.classList.add('error');
                } else {
                    e.classList.remove('error');
                }
            });

        _aside.find('#cars-list-filter')
            .on('change paste keyup keypress search', function (e){
                if (e.keyCode == 13){
                    this.blur();
                }

                if (e.keyCode == 27){
                    this.value = '';
                    this.blur();
                }

                filter(this.value);
            })
            .on('keydown', function (e){
                if (e.keyCode == 8 && !this.value){
                    this.blur();
                }
            })
            .on('blur', function (){ 
                if (!this.value){
                    $(this).hide();
                }
            });

        /* global hotkeys */
        $(window)
            .on('keydown', function (e){
                if (Event.isSomeInput(e)) return;
                if (e.ctrlKey || e.altKey || e.shiftKey) return;

                var f = _aside.find('#cars-list-filter');
                if (/[a-zA-Z\d]/.test(String.fromCharCode(e.keyCode)) || e.keyCode == 8 && f.val()){
                    f.show()[0].focus();
                }

                if (e.keyCode === 38){
                    selectNear(-1);
                    return false;
                }

                if (e.keyCode === 40){
                    selectNear(1);
                    return false;
                }
            });

        _aside.find('#cars-list-filter-focus').click(function (){
            _aside.find('#cars-list-filter').show()[0].focus();
        });

        /* select car */
        _aside.find('#cars-list').click(function (e){
            var car = Cars.byName(e.target.getAttribute('data-id'));
            if (!car) return;
            select(car);
        });

        /* bottom toolbar */
        var cmIgnore = false;
        _aside
            .on('contextmenu', function (){
                this.querySelector('footer').classList.toggle('active');
                cmIgnore = true;
            });

        $(window)
            .on('click contextmenu', function (e){
                if (cmIgnore){
                    cmIgnore = false;
                } else if (e.target !== this){
                    this.classList.remove('active');
                }
            }.bind(_aside.find('footer')[0]));

        /* first row */
        _aside.find('#cars-list-open-directory').click(function (){
            if (!_selected) return;
            Shell.openItem(AcDir.cars);
        });

        _aside.find('#cars-list-reload').click(function (){
            if (Cars.list.some(function (e){
                return e.changed;
            })){
                new Dialog('Reload', [
                    '<p>{0}</p>'.format('Your changes will be lost. Are you sure?')
                ], reload);
            } else {
                reload();
            }

            function reload(){
                Cars.reloadAll();
            }
        });

        /* second row */
        _aside.find('#cars-list-batch').click(function (){
            if (_aside.find('#cars-list-filter').val()){
                var filtered = [];

                var n = _node[0].querySelectorAll('[data-id]');
                for (var i = 0; i < n.length; i++){
                    filtered.push(Cars.byName(n[i].getAttribute('data-id')));
                }

                BatchProcessing.select(filtered);
            } else {
                BatchProcessing.select(Cars.list.slice());
            }
        });

        _aside.find('#cars-list-save').click(function (){
            Cars.saveAll();
        });
    }

    public get selected _selected;

    {
        init();
        mediator.extend(ViewList);
    }
}