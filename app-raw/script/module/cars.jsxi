static partial class Cars {
    var mediator = new Mediator();

    var _list,
        _brands = [],
        _brandsLower = [],
        _classes = [],
        _classesLower = [],
        _tags = [],
        _tagsLower = [];

    public byName(n){
        for (var i = 0; i < _list.length; i++){
            if (_list[i].id === n){
                return _list[i];
            }
        }

        return null;
    }

    private registerTags(tags){
        tags.forEach(function (e){
            var l = e.toLowerCase();
            if (_tagsLower.indexOf(l) < 0){
                _tags.push(e);
                _tagsLower.push(l);

                mediator.dispatch('new.tag', e);
            }
        });
    }

    private registerClass(className){
        var l = className.toLowerCase();
        if (_classesLower.indexOf(l) < 0){
            _classes.push(className);
            _classesLower.push(l);

            mediator.dispatch('new.class', className);
        }
    }

    private registerBrand(brandName){
        var l = brandName.toLowerCase();
        if (_brandsLower.indexOf(l) < 0){
            _brands.push(brandName);
            _brandsLower.push(l);

            mediator.dispatch('new.brand', brandName);
        }
    }

    public scan(){
        mediator.dispatch('scan:start');

        if (!fs.existsSync(AcDir.carsOff)){
            fs.mkdirSync(AcDir.carsOff);
        }

        var names = {};
        _list = fs.readdirSync(AcDir.cars).map(function (e){
            return path.join(AcDir.cars, e);
        }).concat(fs.readdirSync(AcDir.carsOff).map(function (e){
            return path.join(AcDir.carsOff, e);
        })).map(function (carPath){
            car = new Car(carPath);

            if (names[car.id]) return;
            mediator.dispatch('new.car', car);
            names[car.id] = true;
            return car;
        }).filter(function (e){
            return e;
        });

        asyncLoad();
    }

    private asyncLoad(){
        var a = _list, i = 0,
            step = lambda {
                if (a != _list){
                    mediator.dispatch('scan:interrupt', a);
                } else if (i >= a.length){
                    mediator.dispatch('scan:ready', a);
                    lasyAsyncLoad();
                } else {
                    mediator.dispatch('scan:progress', i, a.length);
                    a[i++].loadData(step);
                }
            };

        mediator.dispatch('scan:list', a);
        step();
    }

    private lasyAsyncLoad(){
        var a = _list, i = 0,
            step = setTimeout.bind(window, lambda {
                if (a != _list){
                    mediator.dispatch('lazyscan:interrupt', a);
                } else if (i >= a.length){
                    mediator.dispatch('lazyscan:ready', a);
                } else {
                    mediator.dispatch('lazyscan:progress', i, a.length);
                    a[i++].loadEnsure(step);
                }
            }, 20);

        mediator.dispatch('lazyscan:start', a);
        step();
    }

    public toggle(car, state){
        car.toggle(state);
    }

    public changeData(car, key, value){
        car.changeData(key, value);
    }

    public changeDataSpecs(car, key, value){
        car.changeDataSpecs(key, value);
    }

    public changeParent(car, parentId){
        car.changeParent(parentId);
    }

    public selectSkin(car, skinId){
        car.selectSkin(skinId);
    }

    public updateSkins(car){
        car.updateSkins();
    }

    public updateUpgrade(car){
        car.updateUpgrade();
    }

    public reload(car){
        car.load();
    }

    public reloadAll(){
        scan();
    }

    public save(car){
        car.save();
    }

    public saveAll(){
        _list.forEach(function (car){
            if (car.changed){
                car.save();
            }
        });
    }

    public remove(car){
        for (var i, c in-array _list){
            if (c === car){
                AcTools.Utils.FileUtils.Recycle(car.path);

                if (car.parent){
                    car.parent.children.splice(car.parent.children.indexOf(car), 1);
                    mediator.dispatch('update.car.children', car.parent);
                }

                for (var child in-array car.children){
                    Cars.remove(child);
                }

                _list.splice(i, 1);
                mediator.dispatch('remove.car', car);
                return;
            }
        }
    }

    public get list _list,
        brands _brands,
        classes _classes,
        tags _tags;

    {
        mediator.extend(Cars);
    }
}
