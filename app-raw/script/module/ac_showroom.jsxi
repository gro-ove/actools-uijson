static class AcShowroom {
    public var modes = [
        { id: 'default', name: 'Regular Showroom (Recommended)' }
        { id: 'kunos', name: 'Kunos Style (Dark Room)' }
        { id: 'seatleon', name: 'Seat Leon Eurocup Style' }
        { id: 'gt5', name: 'GT5-style' }
        { id: 'gt6', name: 'GT6-style' }
    ];

    var _showrooms = null;

    var _blackShowroom = 'studio_black';
    var _blackShowroomUrl = 'http://www.racedepartment.com/downloads/studio-black-showroom.4353/';

    public get list {
        if (!_showrooms){
            load();
        }

        return _showrooms;
    };

    public load(){
        _showrooms = fs.readdirSync(AcDir.showrooms).map(function (e){
            var p = path.join(AcDir.showrooms, e);
            var d = null;
            var j = path.join(p, 'ui', 'ui_showroom.json');

            if (fs.existsSync(j)){
                try {
                    d = JSON.parse(fs.readFileSync(j));
                } catch (e){}
            }

            return {
                id: e,
                data: d,
                path: p,
                json: j,
            }
        }).filter(lambda arg);
    }

    public exists(id){
        return fs.existsSync(AcDir.showrooms + '/' + id);
    }

    private handleError(err){
        try {
            var logFile = fs.readFileSync(AcTools.Utils.FileUtils.GetLogFile()).toString();
            if (/\bCOULD NOT FIND SUSPENSION OBJECT SUSP_[LR][FR]\b/.test(logFile)){
                ErrorHandler.handled('Car doesn\'t have a proper suspension. \
                    You could try to use option “Fix SUSP_XX error” in additional edit tools menu.', err);
                return true;
            }
        }

        if (err && err.message === 'Process exited'){
            ErrorHandler.handled('Showroom was terminated too soon.');
            return true;
        }

        return false;
    }

    private get lastShowroom localStorage.lastShowroom || 'showroom',
        lastShowroomFilter localStorage.lastShowroomFilter || '';

    public start(c, s, room){
        if (c.path.indexOf(AcDir.cars)) return;

        if (s == null){
            s = c.selectedSkin.id;
        }

        room = room || lastShowroom;
        var filter = lastShowroomFilter || null;

        if (!exists(room)){
            ErrorHandler.handled('Showroom “%0” is missing.'(room));
            return;
        } 

        if (filter && !AcFilters.exists(filter)){
            ErrorHandler.handled('Filter “%0” is missing.'(filter));
            return;
        } 

        AcTools;
        try {
            AcTools.Processes.Showroom.Start(AcDir.root, c.id, s, room, filter);
        } catch (err){
            ErrorHandler.handled('Cannot start showroom. Maybe the car is broken.', err);
            return;
        }
        
        handleError();
    }

    public select(c, s){
        var d = new Dialog('Showroom', [
            '<h6>Select showroom</h6>'
            '<select id="showroom-select-showroom">{0}</select>'.format(list.map(function (e){
                return '<option value="{0}">{1}</option>'.format(e.id, e.data ? e.data.name : e.id);
            }).join(''))
            '<h6>Select filter</h6>'
            '<select id="showroom-select-filter"><option value="">Don\'t change</option>{0}</select>'.format(AcFilters.list.map(function (e){
                return '<option value="{0}">{1}</option>'.format(e.id, e.id);
            }).join(''))
        ], function (){
            start(c, s);
        }).addButton('Reload List', function (){
            setTimeout(function (){
                load();
                AcFilters.load();
                select(c, s);
            });
        });
        d.find('#showroom-select-showroom').val(lastShowroom).change(function (){
            localStorage.lastShowroom = this.value;
        });
        d.find('#showroom-select-filter').val(lastShowroomFilter).change(function (){
            localStorage.lastShowroomFilter = this.value;
        });
    }

    private shotOutputPreview(car, output, callback){
        // Shell.openItem(output);
        var d = new Dialog('Update Previews', [
            '<div class="left"><h6>Current</h6><img id="current-preview"></div>',
            '<div class="right"><h6>New</h6><img id="new-preview"></div>',
        ], function (){
            callback();
        }, false).setButton('Apply').addButton('Cancel');

        var t = $('<div>' +
            '<button data-action="prev" id="button-prev" disabled>←</button> ' +
            '<button data-action="next" id="button-next">→</button>' +
        '</div>').insertBefore(d.header);

        t.find('#button-prev').click(function (){
            pos--;
            out();
        });

        t.find('#button-next').click(function (){
            pos++;
            out();
        });

        d.content.css({
            maxWidth: 'calc(100vw - 100px)',
            paddingBottom: '10px'
        }).find('img').css({
            width: '100%',
            verticalAlign: 'top'
        });

        var pos = 0;
        function out(){
            t.find('#button-prev').attr('disabled', pos > 0 ? null : true);
            t.find('#button-next').attr('disabled', pos < car.skins.length - 1 ? null : true);
            d.content.find('#current-preview').prop('src', car.skins[pos].preview.cssUrl());
            d.content.find('#new-preview').prop('src', '%0/%1.jpg'(output, car.skins[pos].id).cssUrl());
        }

        out();
    }

    public shot(c, m){
        if (c.path.indexOf(AcDir.cars)) return;

        var mode = Settings.get('aptMode');

        if (mode === 'default'){
            var showroom = Settings.get('aptShowroom') || _blackShowroom;
            var x = -Settings.get('aptCameraX');
            var y = -Settings.get('aptCameraY');
            var distance = -Settings.get('aptCameraDistance');
            var filter = Settings.get('aptFilter') || null;
            var disableSweetFx = !!Settings.get('aptDisableSweetFx');
            var delays = !!Settings.get('aptIncreaseDelays');

            if (Number.isNaN(x)) x = Settings.defaults.aptCameraX;
            if (Number.isNaN(y)) y = Settings.defaults.aptCameraY;
            if (Number.isNaN(distance)) distance = Settings.defaults.aptCameraY;

            showroomTest();
            function showroomTest(){
                function blackShowroomTest(){
                    return fs.existsSync(AcTools.Utils.FileUtils.GetShowroomFolder(AcDir.root, showroom));
                }

                if (showroom == _blackShowroom && !blackShowroomTest()){
                    new Dialog('One More Thing',
                        'Please, install <a href="#" onclick="Shell.openItem(\'%0\')">Black Showroom</a> first.'(_blackShowroomUrl),
                        function (){
                            Shell.openItem(_blackShowroomUrl);
                            return false;
                        }).setButton('From Here').addButton('Right Here', function (){
                            Shell.openItem(AcTools.Utils.FileUtils.GetShowroomsFolder(AcDir.root));
                            return false;
                        }).addButton('Done', function (){
                            if (blackShowroomTest()){
                                setTimeout(proceed);
                            } else {
                                new Dialog('Black Showroom Installation', 'Showroom is still missing. Are you sure?');
                                this.buttons.find('button:last-child').text('Really Done');
                                return false;
                            }                        
                        });
                } else {
                    proceed();
                }
            }
        } else {
            proceed();
        }

        function proceed(){
            var output;
            try {
                if (mode === 'default'){
                    output = AcTools.Processes.Showroom.Shot(AcDir.root, c.id, showroom, !!m, x, y, distance, filter, disableSweetFx, delays);
                } else {
                    output = AcTools.Utils.Kn5RenderWrapper.Shot(c.path, mode);
                }
            } catch (err){
                if (!handleError(err)){
                    ErrorHandler.handled('Cannot start showroom. Maybe the car is broken.', err);
                }

                return;
            }

            shotOutputPreview(c, output, function (){
                AcTools.Utils.ImageUtils.ApplyPreviews(AcDir.root, c.id, output, Settings.get('aptResize'));
                c.loadSkins();
                fs.rmdirSync(output);
            });
        }
    }
}
