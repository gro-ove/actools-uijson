static class CheckUpdate {
    var mediator = new Mediator();

    var _updateFile = path.join(path.dirname(process.execPath), 'carsmgr_update.next');
    var _details = 'https://ascobash.wordpress.com/2015/06/14/actools-uijson/';

    private isInstallableYadisk(link){
        return /^https:\/\/yadi.sk\/d\/\w+/.test(link);
    }

    private isInstallableRd(link){
        return /^http:\/\/www.racedepartment.com\/downloads\//.test(link);
    }

    private isInstallable(link){
        return isInstallableYadisk(link) || isInstallableRd(link);
    }

    public check(c){
        mediator.dispatch('check:start');

        AppServerRequest.checkUpdate(
            gui.App.manifest.version,
            Settings.get('updatesSource', 'stable'),
            function (err, data){
                if (err){
                    console.warn(err);
                    mediator.dispatch('check:failed');
                    return;
                }

                if (data){
                    mediator.dispatch('update', {
                        actualVersion: data.version,
                        changelog: data.changes,
                        detailsUrl: _details,
                        downloadUrl: data.url,
                        installUrl: data.download || isInstallable(data.url) && data.url,
                    });

                    mediator.dispatch('check:done:found');
                } else {
                    mediator.dispatch('check:done');
                }
            });
    }

    var _updateInProcess;
    private httpDownload(url, file, callback, progressCallback){
        try {
            if (typeof file === 'string'){
                file = fs.createWriteStream(file);
            }

            _updateInProcess = require(url.match(/^https?/)[0]).get(url, function(r){
                if (r.statusCode == 302){
                    httpDownload(r.headers['location'], file, callback, progressCallback);
                } else if (r.statusCode == 200){
                    var m = r.headers['content-length'], p = 0;
                    r.pipe(file);
                    r.on('data', function(d) {
                        progressCallback(p += d.length, m);
                    }).on('end', function() {
                        if (_updateInProcess){
                            _updateInProcess = null;
                            setTimeout(callback, 50);
                        }
                    });
                } else {
                    callback(r.statusCode);
                }
            }).on('error', function(e) {
                callback(e);
            });
        } catch (e){
            callback('DOWNLOAD:' + url);
        }
    }

    private yadiskDownload(url, dest, callback, progressCallback){
        _updateInProcess = true;
        var ifr = $('<iframe nwdisable nwfaketop>').attr('src', url).on('load', function (e){
            if (!_updateInProcess) return;

            this.contentWindow._cb = function (e){
                if (!_updateInProcess) return;
                try {
                    clearTimeout(to);
                    httpDownload(e.models[0].data.file, dest, callback, progressCallback);
                } catch callback('YADISK');
                ifr.remove();
            };
            this.contentWindow.eval(`
                _XMLHttpRequest = XMLHttpRequest;
                XMLHttpRequest = function (){
                    var r = new _XMLHttpRequest();
                    r.onreadystatechange = function (e){
                        if (r.status == 200 && r.readyState == 4)
                            _cb(JSON.parse(r.responseText));
                    };
                    return {
                        open: function (){ r.open.apply(r, arguments); },
                        setRequestHeader: function (){ r.setRequestHeader.apply(r, arguments); },
                        getAllResponseHeaders: function (){ r.getAllResponseHeaders.apply(r, arguments); },
                        getResponseHeader: function (){ r.getResponseHeader.apply(r, arguments); },
                        abort: function (){ r.abort.apply(r, arguments); },
                        send: function (){ r.send.apply(r, arguments); },
                    };
                };`);
            try {
                this.contentWindow.document.querySelector('button[data-click-action="resource.download"]').click();
            } catch {
                ifr.remove();
                callback('YADISK:BTN');
            }
        }).css({ position: 'fixed', top: '200vh', left: '200vw' }).appendTo('body');

        var to = setTimeout(function (){
            if (!_updateInProcess) return;
            ifr.remove();
            callback('YADISK:TO');
        }, 10e3);
    }

    private rdDownload(url, dest, callback, progressCallback){
        _updateInProcess = true;
        var ifr = $('<iframe nwdisable nwfaketop>').attr('src', url).on('load', function (e){
            if (!_updateInProcess) return;

            try {
                clearTimeout(to);
                httpDownload(this.contentWindow.document.querySelector('.downloadButton a').href, dest, callback, progressCallback);
            } catch (e){
                ifr.remove();
                callback('RD:BTN');
            }
        }).css({ position: 'fixed', top: '200vh', left: '200vw' }).appendTo('body');

        var to = setTimeout(function (){
            if (!_updateInProcess) return;
            ifr.remove();
            callback('RD:TO');
        }, 10e3);
    }

    private download(url, dest, callback, progressCallback){
        if (isInstallableYadisk(url)) yadiskDownload(url, dest, callback, progressCallback);
        else if (isInstallableRd(url)) rdDownload(url, dest, callback, progressCallback);
        else httpDownload(url, dest, callback, progressCallback);
    }

    public install(url){
        mediator.dispatch('install:start');
        download(url, _updateFile + '~tmp', function (error){
            if (error){
                _updateInProcess = null;
                mediator.dispatch('install:failed', error);
            } else {
                fs.renameSync(_updateFile + '~tmp', _updateFile);
                mediator.dispatch('install:ready');
            }
        }, function (p, m){
            mediator.dispatch('install:progress', p, m);
        });    
    }

    public abort(){
        if (_updateInProcess.abort) _updateInProcess.abort();
        _updateInProcess = null;
        mediator.dispatch('install:interrupt');

        setTimeout(lambda {
            try fs.unlinkSync(_updateFile + '~tmp');
        }, 500);
    }

    public autoupdate(){
        function clearDir(dirPath) {
            try {
                var files = fs.readdirSync(dirPath);
            } catch return;
            for (var i = 0; i < files.length; i++) {
                var filePath = dirPath + '/' + files[i];
                if (fs.statSync(filePath).isFile()){
                    fs.unlinkSync(filePath);
                } else {
                    clearDir(filePath);
                    fs.rmdirSync(filePath);
                }
            }
        };

        try {
            if (fs.existsSync(_updateFile)){
                var d = path.join(path.dirname(process.execPath), 'carsmgr_update~next');
                if (fs.existsSync(d)){
                    clearDir(d);
                } else {
                    fs.mkdirSync(d);
                }

                AcTools.Utils.FileUtils.Unzip(_updateFile, d);

                var b = path.join(path.dirname(process.execPath), 'carsmgr_update.bat');
                fs.writeFileSync(b, `
                    @ECHO OFF

                    CD %~dp0
                    TASKKILL /F /IM carsmgr.exe

                    :CHECK_EXECUTABLE
                    IF NOT EXIST carsmgr.exe GOTO EXECUTABLE_REMOVED

                    DEL carsmgr.exe
                    TIMEOUT /T 1 >nul

                    GOTO CHECK_EXECUTABLE
                    :EXECUTABLE_REMOVED

                    DEL nw.pak icudtl.dat carsmgr.exe

                    for /r %%%%i in (carsmgr_update~next\*) do MOVE /Y "%%%%i" %%%%~nxi
                    RMDIR /S /Q carsmgr_update~next

                    start carsmgr.exe

                    DEL %0 carsmgr_update.next`.replace(/\n/g, '\r\n'));
                Shell.openItem(b);
                gui.App.quit();
            }
        } catch (e){
            mediator.dispatch('autoupdate:failed', e);

            try if (fs.existsSync(_updateFile)){
                fs.unlinkSync(_updateFile);
            }

            try {
                var d = path.join(path.dirname(process.execPath), 'carsmgr_update~next');
                if (fs.existsSync(d)){
                    clearDir(d);
                    fs.rmdirSync(d);
                }
            }

            try {
                var b = path.join(path.dirname(process.execPath), 'carsmgr_update.bat');
                if (fs.existsSync(b)){
                    fs.unlinkSync(b);
                }
            }
        }
    }

    {
        autoupdate();
        mediator.extend(CheckUpdate);
    }
}