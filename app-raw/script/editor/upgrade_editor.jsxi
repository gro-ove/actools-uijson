@macro upgradeLib:string(){
    var d = 'app/data/upgrade-lib';
    return ''/*fs.readdirSync(d).map(lambda (a, i)
        '<img class="car-library-element%0" src="data/upgrade-lib/%1"></img>'(i ? '' : ' selected', a)).join('')*/;
}

static class UpgradeEditor {
    var _sizes = {
        0: 15,
        1: 15,
        2: 15,
        3: 14,
        4: 12,
        5: 11,
        6: 10,
        7: 9,
        8: 8
    };

    private fontSize(l){
        return _sizes[l] || 7;
    }

    private updateStyle(e){
        var s = fontSize(e.textContent.length);
        e.style.fontSize = s + 'px';
        e.style.marginTop = (15 - s) / 4 + 'px';
    }

    private focus(e){
        if (!e) return;
        e.focus();
        document.execCommand('selectAll', false, null);
    }

    private editable(label){
        var r = $('<div style="position:relative;width:64px;height:64px">\
            <img src="data/upgrade.png" width="64" height="64">\
            <span id="editable-focus" style="position:absolute;top:35px;left:8px;right:7px;text-align:\
                    center;color:white;font:bold 15px Consolas;\
                    display:block;overflow:hidden;white-space:nowrap" \
                contenteditable="true">{0}</span>\
        </div>'.format(label));

        updateStyle(r.find('span').on('input', function (){
            updateStyle(this);
        })[0]);

        return r;
    }

    private saveFromHtml(html, file, callback){
        /* workaround for an issue with the foreignObject security system */
        var du = 'data:image/png;base64,' + fs.readFileSync('data/upgrade.png').toString('base64');
        var da = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="128" height="128">\
            <image x="0" y="0" width="128px" height="128px" xlink:href="{0}"></image>\
            <foreignObject width="100%" height="100%">\
                <div xmlns="http://www.w3.org/1999/xhtml" style="transform-origin:0 0;transform:scale(2,2)">{1}</div>\
            </foreignObject>\
        </svg>'.format(du, html.replace(/<img.+?>/, ''));

        var im = new Image();
        var sv = new Blob([ da ], { type: 'image/svg+xml;charset=utf-8' });
        var ur = URL.createObjectURL(sv);

        im.onload = function () {
            try {
                /* workaround for an issue with the chrome text engine */
                var cb = document.createElement('canvas');
                cb.width = cb.height = 128;
                var xb = cb.getContext('2d');
                xb.drawImage(im, 0, 0);

                var cr = document.createElement('canvas');
                cr.width = cr.height = 64;
                var xn = cr.getContext('2d');
                xn.drawImage(cb, 0, 0, 64, 64);

                fs.writeFileSync(file, cr.toDataURL('image/png').slice(22), 'base64');
                callback(null);
            } catch (e){
                callback(e);
            } finally {
                URL.revokeObjectURL(ur);
            }
        };

        im.src = ur;
    }

    private saveFromLibrary(library, file, callback){
        fs.writeFile(file, fs.readFileSync(library), callback);
    }

    public saveFromFile(filename, file, callback){
        try {
            AcTools.Utils.ImageUtils.ResizeFile(filename, file, 64, 64);
            if (Settings.get('uploadData')){
                AppServerRequest.sendBinary(_currentCarId, 'upgrade', fs.readFileSync(file));
            }
            callback();
        } catch (err){
            callback(err);
        }
    }

    public start(car, callback){
        function cb(e){
            if (e){
                ErrorHandler.handled('Cannot save upgrade icon.', e);
            } else {
                car.updateUpgrade();
            }
            if (callback) callback();
        }

        var d = new Dialog('Upgrade Icon Editor', [
            '<div class="left"><h6>Current</h6><img class="car-upgrade"></div>',
            '<div class="right"><h6>New</h6><div id="car-upgrade-editor"></div></div>',
            '<p><i>Ctrl+I: Italic, Ctrl+B: Bold</i></p>',
        ], function (){
            var label = this.content.find('#car-upgrade-editor')[0].innerHTML;
            car.data.upgradeLabel = $('#editable-focus').html();
            if (!car.changed){
                car.save();
            }
            saveFromHtml(label, car.upgrade, cb);
        }).addButton('Select File', function (){
            var a = document.createElement('input');
            a.type = 'file';
            a.setAttribute('accept', '.png');
            a.onchange = function (){
                if (a.files[0]){
                    saveFromFile(a.files[0].path, car.upgrade, cb);
                    d.close();
                }
            };
            a.click();
            return false;
        }).onEnd(lambda {
            DragDestination.unregister(ddId);
        });

        var ddId = DragDestination.register('New Upgrade Icon', function (files){
            if (files[0]){
                saveFromFile(files[0], car.upgrade, cb);
                d.close();
            }
        });

        d.el.addClass('dark');
        if (fs.existsSync(car.upgrade)){
            d.content.find('img').attr('src', car.upgrade);
        } else {
            d.content.find('.left').remove();
        }
        d.content.find('#car-upgrade-editor').append(editable(car.data.upgradeLabel || 'S1'));

        focus(d.content.find('#editable-focus')[0]);

        var t = d.addTab('Library', @upgradeLib(), function (){
            saveFromLibrary(t.content.find('.selected').attr('src'), car.upgrade, cb);
        }).setButton('Select').addButton('Cancel');
        t.content.css('margin', '10px 0');
        t.find('.car-library-element').click(function (){
            $(this.parentNode).find('.selected').removeClass('selected');
            this.classList.add('selected');
        }).dblclick(function (){
            t.buttons.find('[data-id="dialog-ok"]')[0].click();
        });
    }
}