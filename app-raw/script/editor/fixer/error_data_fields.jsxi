class MissingDataNameFixer extends AbstractFixer {
    protected reloadAfter(){
        car.loadData();
    }

    fix(v){
        fixJsonFile(car.json, function (data){
            data.name = v;
        });
    }

    createNew(c){
        new Dialog('Input A New Name', '<input required>', function (){
            fix(this.find('input').val());
            c();
        });
    }

    useId(c){
        fix(car.id);
        c();
    }

    public get title 'Car name is missing',
        solutions [
            { name: 'Enter a new name', fn: createNew }
            { name: 'Use id as a name', fn: useId }
        ];
}

class MissingDataBrandFixer extends AbstractFixer {
    protected reloadAfter(){
        car.loadData();
    }

    fix(v){
        fixJsonFile(car.json, function (data){
            data.brand = v;
        });
    }

    createNew(c){
        new Dialog('Select Brand Name', '<input autocomplete list="brands" required>', function (){
            fix(this.find('input').val());
            c();
        });
    }

    useBr(c){
        fix(br);
        c();
    }

    var br;
    extractBrand(){
        return br = Cars.brands.filter(lambda car.id.indexOf(arg.toLowerCase()) === 0)[0];
    }

    public get title 'Car brand is missing',
        solutions [
            extractBrand() && { name: 'Use “%0” as a brand'(br), fn: useBr }
            { name: 'Select a new brand', fn: createNew }
        ];
}

RestorationWizard.register('data-name-missing', MissingDataNameFixer);
RestorationWizard.register('data-brand-missing', MissingDataBrandFixer);

class WrongDataParentFixer extends AbstractFixer {
    protected reloadAfter(){
        car.loadData();
    }

    fix(v){
        fixJsonFile(car.json, function (data){
            if (v){
                data.parent = v;
            } else {
                delete data.parent;
            }
        });
    }

    createNew(c){
        d = new Dialog('Select New Parent', '<select></select>', function (){
            fix(this.find('select').val());
            c();
        });

        var s = d.find('select')[0];
        s.innerHTML = '<option value="">None</option>' + Cars.list.filter(function (e){
            return e.data && !e.disabled && e.parent == null && e.id != car.id && (!car.parent || car.parent.id != car.id);
        }).map(function (e){
            return '<option value="{0}">{1}</option>'.format(e.id, e.data.name);
        }).join('');
    }

    makeInd(c){
        fix(null);
        c();
    }

    public get title 'Parent id is incorrect',
        solutions [
            { name: 'Make independent', fn: makeInd }
            car.children.length == 0 && { name: 'Select a new parent', fn: createNew }
        ];
}

RestorationWizard.register('parent-wrong', WrongDataParentFixer);
RestorationWizard.register('parent-missing', WrongDataParentFixer);