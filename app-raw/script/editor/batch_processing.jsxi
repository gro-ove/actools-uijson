class AbstractBatchProcessor {
    public start(){}
    abstract public process(car, callback);
    public end(){}
}

class JsBatchProcessor extends AbstractBatchProcessor {
    var _fn;

    (fn){
        _fn = fn;
    }

    public process(car, callback){
        try {
            _fn(car);
        } catch (err){
            callback(err);
            return;
        }

        callback();
    }
}

class JsBatchCallbackProcessor extends AbstractBatchProcessor {
    var _fn;

    (fn){
        _fn = fn;
    }

    public process(car, callback){
        try {
            _fn(car, callback);
        } catch (err){
            callback(err);
        }
    }
}

class ExportDbProcessor extends AbstractBatchProcessor {
    var data;

    (){
    }

    public start(){
        data = {
            years: {},
            countries: {},
            authors: {},
            urls: {}
        };
    }

    public end(){
        var dir = DataStorage.getUserContentDir('Details (Preload)');
        for (var k, a in-object data){
            fs.writeFileSync(dir + '/' + k + '.json', JSON.stringify(a));
        }
    }

    public process(car, callback){
        if (car.data.year) data.years[car.id] = car.data.year;
        if (car.data.country) data.countries[car.id] = car.data.country;
        if (car.data.author && car.data.author !== 'Kunos') data.authors[car.id] = car.data.author;
        if (car.data.url) data.urls[car.id] = car.data.url;
        callback();
    }
}

static class BatchProcessing {
    var mediator = new Mediator();

    var _procs;

    public process(cars, processor){
        if (!_procs) init();
        AppServerRequest.sendDataDisabled = true;

        if (typeof processor === 'string'){
            for (var p in-array _procs){
                if (p.name === processor){
                    processor = p.proc;
                    break;
                }
            }

            if (typeof processor === 'string'){
                ErrorHandler.handled('Processor “%0” not found.'(processor));
                return;
            }
        }

        var abort = false;

        var d = new Dialog('Batch Processing', [ '<progress></progress>' ], function (){
            AppServerRequest.sendDataDisabled = false;
            abort = true;
        }, false).setButton('Abort');

        var progress = d.find('progress');
        progress[0].max = cars.length;

        var i = 0, k = 0;
        function next(){
            if (abort) return;

            if (cars[i]){
                var j = i++;
                progress[0].value = j;
                processor.process(cars[j], nextDelayed);
            } else {
                AppServerRequest.sendDataDisabled = false;
                d.close();
                processor.end();
                mediator.dispatch('end', processor);
            }
        }

        function nextDelayed(){
            if (++k < 10){
                next();
            } else {
                setTimeout(next);
                k = 0;
            }
        }

        mediator.dispatch('start', processor);
        processor.start();
        next();
    }

    public add(name, proc){
        if (!_procs) _procs = [];
        _procs.push({ name: name, proc: proc });
    }

    public select(cars){
        if (!_procs) init();
        new Dialog('Batch Processing', [
            '<h6>Cars</h6>',
            '%0 cars to process'(cars.length),
            '<h6>Processor</h6>',
            '<select>%0</select>'(_procs.map(lambda (e, i) '<option value="%0">%1</option>'(i, e.name))),
            '<div id="proc-options"></div>',
            'If you have any ideas about different processors, you can use Feedback Form in Settings.',
        ], function (){
            setTimeout(function (){
                process(cars, _procs[this.find('select').val()].proc); 
            }.bind(this));
        }).find('select').val(0);
    }

    private init(){
        add('Add missing brand names to car names', new JsBatchProcessor(function (car){
            if (!car.data || !car.data.name || !car.data.brand) return;

            if (car.data.brand === 'Various') return;
            if (Brands.nameContains(car.data.name, car.data.brand)) return;

            car.changeData('name', Brands.toNamePart(car.data.brand) + ' ' + car.data.name);
        }));

        add('Remove brand names from car names', new JsBatchProcessor(function (car){
            if (!car.data || !car.data.name || !car.data.brand) return;

            if (!Brands.nameContains(car.data.name, car.data.brand)) return;

            car.changeData('name', car.data.name.substr(Brands.toNamePart(car.data.brand).length + 1));
        }));

        add('Add missing years to car names', new JsBatchProcessor(function (car){
            if (!car.data || !car.data.name || !car.data.year) return;

            if (car.data.brand === 'Various') return;
            if (Years.nameContains(car.data.name)) return;

            car.changeData('name', car.data.name + ' \'' + ('' + car.data.year).slice(-2));
        }));

        add('Remove years from car names', new JsBatchProcessor(function (car){
            if (!car.data || !car.data.name) return;

            if (!Years.nameContains(car.data.name)) return;
            car.changeData('name', Years.removeFromName(car.data.name));
        }));

        add('Lowercase classes', new JsBatchProcessor(function (car){
            if (!car.data || !car.data.class) return;
            car.changeData('class', car.data.class.toLowerCase());
        }));

        add('Lowercase & fix tags', new JsBatchProcessor(function (car){
            if (!car.data || !car.data.tags) return;
            var temp = 0,
                tags = car.data.tags.map(function (raw){
                    var tag;
                    if (/^(?:#(a\d+)|([aA]\d+))$/.test(tag)){
                        tag = '#' + (RegExp.$1 || RegExp.$2).toUpperCase();
                    } else {
                        tag = Countries.fixTag(raw.toLowerCase());
                    }

                    if (tag === raw){
                        temp++;
                    } 

                    return tag;
                });

            if (temp !== car.data.tags.length){
                car.changeData('tags', tags);
            }
        }));

        add('Remove logo.png', new JsBatchProcessor(function (car){
            if (fs.existsSync(car.path + '/logo.png')){
                fs.unlinkSync(car.path + '/logo.png');
            }
        }));

        add('Replace logo.png by ui/badge.png', new JsBatchProcessor(function (car){
            if (!fs.existsSync(car.badge)) return;
            fs.writeFileSync(car.path + '/logo.png', fs.readFileSync(car.badge));
        }));

        add('Set default badges', new JsBatchCallbackProcessor(function (car, callback){
            BadgeEditor.autoupdate(car, true, callback);
        }));

        if (localStorage.developerMode) add('Export database', new ExportDbProcessor());
    }

    {
        mediator.extend(BatchProcessing);
    }
}