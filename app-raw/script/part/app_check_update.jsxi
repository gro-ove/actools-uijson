static class CheckUpdate {
    var mediator = new Mediator();

    var _updateFile = path.join(path.dirname(process.execPath), 'carsmgr_update.next');
    var _details = 'https://ascobash.wordpress.com/2015/06/14/actools-uijson/';

    public check(c){
        mediator.dispatch('check:start');

        AppServerRequest.checkUpdate(
            gui.App.manifest.version,
            Settings.get('updatesSource'),
            function (err, data){
                if (err){
                    console.warn(err);
                    mediator.dispatch('check:failed');
                    return;
                }

                if (data){
                    mediator.dispatch('update', {
                        actualVersion: data.version,
                        changelog: data.changes,
                        detailsUrl: _details,
                        downloadUrl: data.url,
                        installUrl: data.download || Downloader.isAvailable(data.url) && data.url,
                    });

                    mediator.dispatch('check:done:found');
                } else {
                    mediator.dispatch('check:done');
                }
            });
    }

    var _downloadId;
    public install(url){
        mediator.dispatch('install:start');
        _downloadId = Downloader.download(url, _updateFile + '~tmp', function (error){
            if (error){
                mediator.dispatch('install:failed', error);
            } else {
                fs.renameSync(_updateFile + '~tmp', _updateFile);
                mediator.dispatch('install:ready');
            }

            _downloadId = null;
        }, function (p, m){
            mediator.dispatch('install:progress', p, m);
        });    
    }

    public abort(){
        if (!_downloadId) return;
        Downloader.abort(_downloadId);
        _downloadId = null;
        
        mediator.dispatch('install:interrupt');

        setTimeout(lambda {
            try fs.unlinkSync(_updateFile + '~tmp');
        }, 500);
    }

    public autoupdate(){
        try {
            if (fs.existsSync(_updateFile)){
                var d = path.join(path.dirname(process.execPath), 'carsmgr_update~next');
                if (fs.existsSync(d)){
                    fs.removeDirSync(d, false);
                } else {
                    fs.mkdirSync(d);
                }

                AcTools.Utils.FileUtils.Unzip(_updateFile, d);

                var b = path.join(path.dirname(process.execPath), 'carsmgr_update.bat');
                fs.writeFileSync(b, `
                    @ECHO OFF

                    CD %~dp0
                    TASKKILL /F /IM carsmgr.exe

                    :CHECK_EXECUTABLE
                    IF NOT EXIST carsmgr.exe GOTO EXECUTABLE_REMOVED

                    DEL carsmgr.exe
                    TIMEOUT /T 1 >nul

                    GOTO CHECK_EXECUTABLE
                    :EXECUTABLE_REMOVED

                    DEL carsmgr.exe

                    for /r %%%%i in (carsmgr_update~next\*) do MOVE /Y "%%%%i" %%%%~nxi
                    RMDIR /S /Q carsmgr_update~next

                    start carsmgr.exe

                    DEL %0 carsmgr_update.next`.replace(/\n/g, '\r\n'));
                Shell.openItem(b);
                gui.App.quit();
            }
        } catch (e){
            mediator.dispatch('autoupdate:failed', e);

            try if (fs.existsSync(_updateFile)){
                fs.unlinkSync(_updateFile);
            }

            try {
                var d = path.join(path.dirname(process.execPath), 'carsmgr_update~next');
                if (fs.existsSync(d)){
                    clearDir(d);
                    fs.rmdirSync(d);
                }
            }

            try {
                var b = path.join(path.dirname(process.execPath), 'carsmgr_update.bat');
                if (fs.existsSync(b)){
                    fs.unlinkSync(b);
                }
            }
        }
    }

    {
        autoupdate();
        mediator.extend(CheckUpdate);
    }
}