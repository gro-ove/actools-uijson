static partial class Cars {
    partial class Car {
        var _badgeLoaded;
        public loadBadge(callback){
            clearErrors('badge');
            if (_badgeLoaded) gui.App.clearCache();

            fs.exists(badge, function (result){
                if (!result){
                    addError('badge-missing', 'Missing badge.png');
                }

                _badgeLoaded = true;
                if (callback) callback();
            }.bind(this));
        }

        public loadSkins_stuff(callback){
            var a = skins, i = 0;
            step();

            function step(){
                if (a != skins){
                    if (callback) callback();
                } else if (i >= a.length){
                    if (callback) callback();
                    mediator.dispatch('update.car.skins:data', this);
                } else {
                    a[i++].load(step);
                }
            }
        }

        public loadSkins(callback){
            if (skins){
                skins = null;
                mediator.dispatch('update.car.skins', this);
                gui.App.clearCache();
            }

            clearErrors('skin');
            clearErrors('skins');

            if (!fs.existsSync(skinsDir)){
                addError('skins-missing', 'Skins folder is missing');
                if (callback) callback();
                return;
            }

            if (!fs.statSync(skinsDir).isDirectory()){
                addError('skins-file', 'There is a file instead of skins folder', err);
                if (callback) callback();
                return;
            }

            fs.readdir(skinsDir, function (err, result){
                skins = false;

                if (err){
                    addError('skins-access', 'Cannot access skins', err);
                } else {
                    result = result.filter(function (e){
                        return fs.statSync('%0/skins/%1'(path, e)).isDirectory();
                    });

                    if (skins.length === 0){
                        addError('skins-empty', 'Skins folder is empty');
                    } else {
                        skins = result.map(function (e){
                            return new CarSkin(this, e);
                        }.bind(this));

                        var index = 0;
                        if (selectedSkin){
                            for (var i, s in-array skins){
                                if (s.id === selectedSkin.id){
                                    index = i;
                                    break;
                                }
                            }
                        }

                        selectedSkin = skins[index];
                        mediator.dispatch('update.car.skins', this);
                        loadSkins_stuff(callback);
                        return;
                    }
                }

                if (callback) callback();
            }.bind(this));
        }

        public loadData(callback){
            if (data){
                data = null;
                mediator.dispatch('update.car.data', this);
            }

            if (parent){
                parent.children.splice(parent.children.indexOf(this), 1);
                mediator.dispatch('update.car.children', parent);
                parent = null;
                mediator.dispatch('update.car.parent', this);
            }

            clearErrors('data');
            clearErrors('parent');

            if (!fs.existsSync(json)){
                if (fs.existsSync(json + '.disabled')){
                    fs.renameSync(json + '.disabled', json);
                } else {
                    if (changed){
                        changed = false;
                        mediator.dispatch('update.car.changed', this);
                    }

                    data = false;
                    addError('data-missing', 'Missing ui_car.json');
                    mediator.dispatch('update.car.data', this);
                    if (callback) callback();
                    return;
                }
            }

            fs.readFile(json, function (err, result){
                if (changed){
                    changed = false;
                    mediator.dispatch('update.car.changed', this);
                }

                if (err){
                    data = false;
                    addError('data-access', 'Unavailable ui_car.json', err);
                } else {
                    var dat = parseLoadedData(result.toString()),
                        err = dat instanceof Error && dat;

                    data = false;
                    if (err || !dat){
                        addError('data-damaged', 'Damaged ui_car.json', err);
                    } else if (!dat.name){
                        addError('data-name-missing', 'Name is missing');
                    } else if (!dat.brand){
                        addError('data-brand-missing', 'Brand is missing');
                    } else {
                        data = dat;
                        if (!data.description) data.description = '';
                        if (!data.tags) data.tags = [];
                        if (!data.specs) data.specs = {};

                        data.name = data.name.trim();
                        data.brand = data.brand.trim();

                        data.class = (data.class || '').trim();
                        data.description = data.description.replace(/\n/g, ' ')
                            .replace(/<\/?br\/?>[ \t]*|\n[ \t]+/g, '\n').replace(/<\s*\/?\s*\w+\s*>/g, '').replace(/[\t ]+/g, ' ').decodeHtmlEntities();

                        if (data.year == null && Years.nameContains(data.name)){
                            data.year = Years.fromName(data.name);
                        }

                        if (data.country == null){
                            for (var tag in-array data.tags){
                                var c = Countries.fromTag(tag);
                                if (c == null) c = Countries.fromBrand(data.brand);
                                if (c != null) data.country = c;
                            }
                        }

                        if (data.author == null){
                            data.author = Authors.fromId(id);
                        }

                        if (data.parent != null){
                            if (data.parent == id){
                                addError('parent-wrong', 'Car cannot be parent to itself');
                            } else {
                                var par = byName(data.parent);
                                if (par == null){
                                    addError('parent-missing', 'Parent is missing');
                                } else if (par.parent){
                                    addError('parent-wrong', 'Parent is child');
                                    // TODO: Check in second pass or something?
                                } else {
                                    parent = par;
                                    parent.children.push(this);

                                    mediator.dispatch('update.car.parent', this);
                                    mediator.dispatch('update.car.children', parent);
                                }

                                if (!fs.existsSync(upgrade)){
                                    addError('parent-upgrade-missing', 'Missing upgrade.png');
                                }
                            }
                        }

                        registerTags(data.tags);
                        registerClass(data.class);
                        registerBrand(data.brand);
                        registerCountry(data.country);
                        registerAuthor(data.author);
                    }
                }

                mediator.dispatch('update.car.data', this);
                if (callback) callback();
            }.bind(this));
        }

        public load(callback){
            clearErrors();
            loadBadge();
            loadSkins();
            loadData(callback);
        }

        public reload(callback){
            clearErrors();
            loadBadge();
            loadSkins();
            loadData(callback);
            // loadData(lambda {
            //     testAcd(callback);
            // });
        }

        public loadEnsure(callback){
            function s1(){ if (!_badgeLoaded) loadBadge(s2); else s2(); }
            function s2(){ if (skins == null) loadSkins(s3); else s3(); }
            function s3(){ if (data == null) loadData(callback); else if (callback) callback(); }
            s1();
        }

        public testAcd(callback){
            if (data && data.author === 'Kunos') return callback();
            clearErrors('acd');
            AcTools.Utils.DataFixer.TestData(path, getSpec('weight') || 0, lambda {
                addError(arg, _messages[arg] || 'Undeclared error: “%0”'(arg));
            }, lambda {
                if (callback) setTimeout(callback);
            });
        }

        static var _messages = {
            'acd-test-error': 'Cannot test data'
            'acd-invalid-weight': 'Weight in data has to be equal to weight in UI + 75kg (±90kg)'
            'acd-obsolete-aero-data': 'Obsolete section “DATA” in aero.ini'
        };
    }

    private parseLoadedData(data){
        try {
            return JSON.parse(data);
        } catch try {
            return JSON.flexibleParse(data);
        } catch (er){
            return er;
        }
    }
}