class Dialog {
    public el;
    public header, content, buttons;
    public tabs;

    private _callback, _closeCallback, _endCallback;
    private _closeOnEnter = true;

    (title, elements, callback, closeCallback) {
        el = $('<dialog>').html('<article><div class="dialog-header"><h4>' + title + 
            '</h4></div><div class="dialog-content"></div><div class="dialog-buttons"><button data-id="dialog-ok">ОК</button></div></article>').click(function (e){
            if (e.target.tagName == 'DIALOG' && (_closeCallback == null || 
                    _closeCallback !== false && _closeCallback(e) !== false)){
                close();
            }
        }).appendTo('body');

        header = el.find('.dialog-header > h4');
        content = el.find('.dialog-content');
        buttons = el.find('.dialog-buttons');

        setContent(elements);

        _callback = callback && callback.bind(this);
        _closeCallback = closeCallback && closeCallback.bind(this);

        if (_callback === false){
            el.find('[data-id="dialog-ok"]').hide();
        }

        el.find('[data-id="dialog-ok"]').click(function (e){
            if (!_callback || _callback(e) !== false){
                close();
            }
        });

        el.find('*').keydown(function (e){
            if (e.keyCode == 13 && _closeOnEnter){
                var okButton = el[0].querySelector('[data-id="dialog-ok"]');
                if (okButton){
                    el[0].querySelector('[data-id="dialog-ok"]').click();
                    return false;
                }
            }
        });
    }

    public setContent(elements){
        if (!Array.isArray(elements)){
            elements = [ elements ];
        }

        var html = '';
        for (var element in-array elements){
            if (element == null || element === '') continue;
            html += typeof element === 'string' && element[0] !== '<' && element[element.length - 1] !== '>' ? '<p>%0</p>'(element) : element;
        }
        
        content.html(html);

        // content.empty();
        // for (var element in-array elements){
        //     content.append($(typeof element === 'string' && element[0] !== '<' && element[element.length - 1] !== '>' ? '<p>%0</p>'(element) : element));
        // }

        return this;
    }

    public closeOnEnter(v){
        _closeOnEnter = v;
        return this;
    }

    public onEnd(callback){
        _endCallback = callback.bind(this);
        return this;
    }

    public setButton(a, c){
        buttons.find('[data-id="dialog-ok"]').toggle(a != null).text(a);
        if (c != null){ _callback = c; }
        return this;
    }

    public addButton(text, fn){
        fn = fn && fn.bind(this);
        $('<button>' + text + '</button>').appendTo(buttons).click(function (e){
            if (!fn || fn(e) !== false){
                close();
            }
        });
        return this;
    }

    public find(a){
        return el.find(a);
    }

    public close(){
        if (_endCallback) _endCallback();
        el.remove();
    }

    public addTab(title, content, callback, closeCallback){
        if (!tabs){
            tabs = [ this ];
            header.parent().addClass('tabs').click(function (e){
                if (e.target.tagName === 'H4' && !e.target.classList.contains('active')){
                    el.find('.dialog-header h4.active').removeClass('active');
                    e.target.classList.add('active');

                    var i = Array.prototype.indexOf.call(e.target.parentNode.childNodes, e.target);
                    var l = el.find('.dialog-content')[0];
                    l.parentNode.removeChild(l);
                    var l = el.find('.dialog-buttons')[0];
                    l.parentNode.removeChild(l);
                    tabs[i].content.appendTo(el.children());
                    tabs[i].buttons.appendTo(el.children());
                }
            });
        }

        var n = new Dialog(title, content, callback, closeCallback);
        tabs.push(n);

        document.body.removeChild(n.el[0]);
        n.header.appendTo(header.addClass('active').parent());
        n.close = close.bind(this);

        return n;
    }
}
