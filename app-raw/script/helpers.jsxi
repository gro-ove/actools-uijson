Object.clone = function (o){
    if (Array.isArray(o)){
        return o.map(Object.clone);
    } else if (o && typeof o === 'object'){
        var r = {};
        for (var n in o){
            r[n] = Object.clone(o[n]);
        }
        return r;
    } else {
        return o;
    }
};

Event.isSomeInput = function (e){
    var n = e.target;

    if (n.tagName === 'INPUT' || n.tagName === 'TEXTAREA' || n.tagName === 'SELECT') return true;

    while (n){
        if (n.contentEditable === 'true') return true;
        n = n.parentNode;
    }

    return false;
};

RegExp.fromQuery = function (q, w){
    var r = q.replace(/(?=[\$^.+(){}[\]])/g, '\\').replace(/\?|(\*)/g, '.$1');
    return new RegExp(w ? '^(?:' + r + ')$' : r, 'i');
};

String.prototype.cssUrl = function (){
    return 'file://' + this.replace(/\\/g, '/');
};

JSON.flexibleParse = function (d){
    var r;
    eval('r=' + d.toString().replace(/"(?:[^"\\]*(?:\\.)?)+"/g, function (_){
        return _.replace(/\r?\n/g, '\\n');
    }));
    return r;
};

JSON.restoreDamaged = function (data, fields){
    data = data.toString().replace(/\r?\n|\r/g, '\n').trim();

    var result = {};
    for (var key, type in-object fields){
        var re = new RegExp(`(?:"\s*%0\s*"|'\s*%0\s*'|%0)\s*:\s*([\s\S]+)`(key));
        var m = data.match(re);
        if (re.test(data)){
            var d = RegExp.$1.trim();

            if (type !== 'multiline' && type !== 'array' && type !== 'pairsArray'){
                d = d.split('\n')[0].replace(/\s*,?\s*("\s*\w+\s*"|'\s*\w+\s*'|\w+)\s*:[\s\S]+|\s*}/, '');
            }

            d = d.replace(/(?:\n?\s*,?\s*("\s*\w+\s*"|'\s*\w+\s*'|\w+)\s*:|\s*})[\s\S]*$/, '');
            result[key] = d.trim().replace(/,$/, '');
        }
    }

    for (var key, value in-object result){
        if (fields[key] === 'string' || fields[key] === 'multiline'){
            result[key] = value.replace(/^['"]/, '').replace(/['"]$/, '');
        }

        if (fields[key] === 'array' || fields[key] === 'pairsArray'){
            value = value.split(/\n|,/)
                .map(lambda arg.trim().replace(/^['"]/, '').replace(/['"]$/, ''))
                .filter(lambda (a, i) a && (i > 0 || a != '['));
            if (value[value.length - 1] === ']'){
                value.length--;
            }

            result[key] = value;
        }

        if (fields[key] === 'pairsArray'){
            result[key] = [];
            var last;
            value.forEach(lambda {
                if (arg === '[' || arg === ']') return;
                if (last){
                    last.push(arg);
                    last = null;
                } else {
                    result[key].push(last = [ arg ]);
                }
            });
        }

        if (fields[key] === 'number'){
            value = value.replace(/^['"]/, '').replace(/['"]$/, '');

            value = value.replace(/[liI]/g, '1').replace(/[oO]/g, '0');
            result[key] = +value;

            if (Number.isNaN(result[key])){
                result[key] = +value.replace(/[^-.\d]+/g, '');
            }

            if (Number.isNaN(result[key])){
                result[key] = +(value.replace(/[^\d]+/g, '') || '0');
            }
        }
    }

    return result;
};
