Object.clone = function (o){
    if (Array.isArray(o)){
        return o.map(Object.clone);
    } else if (o && typeof o === 'object'){
        var r = {};
        for (var n in o){
            r[n] = Object.clone(o[n]);
        }
        return r;
    } else {
        return o;
    }
};

Event.isSomeInput = function (e){
    var n = e.target;

    if (n.tagName === 'INPUT' || n.tagName === 'TEXTAREA' || n.tagName === 'SELECT') return true;

    while (n){
        if (n.contentEditable === 'true') return true;
        n = n.parentNode;
    }

    return false;
};

RegExp.fromQuery = function (q, w){
    var r = q.replace(/(?=[\$^.+(){}[\]])/g, '\\').replace(/\?|(\*)/g, '.$1');
    return new RegExp(w ? '^(?:' + r + ')$' : r, 'i');
};

String.prototype.cssUrl = function (){
    return (this[1] === ':' ? 'file://' : '') + this.replace(/\\/g, '/');
};

String.prototype.decodeHtmlEntities = function (){
    return this.replace(/&(?:#(\d+)|(\w{2,7}));/g, function (_, n, v){
        if (n) return String.fromCharCode(+n);
        switch (v){
            case 'amp': return '&';
            case 'nbsp': return ' ';
            case 'iexcl': return '¡';
            case 'cent': return '¢';
            case 'pound': return '£';
            case 'curren': return '¤';
            case 'yen': return '¥';
            case 'brvbar': return '¦';
            case 'sect': return '§';
            case 'uml': return '¨';
            case 'copy': return '©';
            case 'ordf': return 'ª';
            case 'laquo': return '«';
            case 'not': return '¬';
            case 'shy': return '­';
            case 'reg': return '®';
            case 'macr': return '¯';
            case 'deg': return '°';
            case 'plusmn': return '±';
            case 'sup2': return '²';
            case 'sup3': return '³';
            case 'acute': return '´';
            case 'micro': return 'µ';
            case 'para': return '¶';
            case 'middot': return '·';
            case 'cedil': return '¸';
            case 'sup1': return '¹';
            case 'ordm': return 'º';
            case 'raquo': return '»';
            case 'frac14': return '¼';
            case 'frac12': return '½';
            case 'frac34': return '¾';
            case 'iquest': return '¿';
            case 'Agrave': return 'À';
            case 'Aacute': return 'Á';
            case 'Acirc': return 'Â';
            case 'Atilde': return 'Ã';
            case 'Auml': return 'Ä';
            case 'Aring': return 'Å';
            case 'AElig': return 'Æ';
            case 'Ccedil': return 'Ç';
            case 'Egrave': return 'È';
            case 'Eacute': return 'É';
            case 'Ecirc': return 'Ê';
            case 'Euml': return 'Ë';
            case 'Igrave': return 'Ì';
            case 'Iacute': return 'Í';
            case 'Icirc': return 'Î';
            case 'Iuml': return 'Ï';
            case 'ETH': return 'Ð';
            case 'Ntilde': return 'Ñ';
            case 'Ograve': return 'Ò';
            case 'Oacute': return 'Ó';
            case 'Ocirc': return 'Ô';
            case 'Otilde': return 'Õ';
            case 'Ouml': return 'Ö';
            case 'times': return '×';
            case 'Oslash': return 'Ø';
            case 'Ugrave': return 'Ù';
            case 'Uacute': return 'Ú';
            case 'Ucirc': return 'Û';
            case 'Uuml': return 'Ü';
            case 'Yacute': return 'Ý';
            case 'THORN': return 'Þ';
            case 'szlig': return 'ß';
            case 'agrave': return 'à';
            case 'aacute': return 'á';
            case 'acirc': return 'â';
            case 'atilde': return 'ã';
            case 'auml': return 'ä';
            case 'aring': return 'å';
            case 'aelig': return 'æ';
            case 'ccedil': return 'ç';
            case 'egrave': return 'è';
            case 'eacute': return 'é';
            case 'ecirc': return 'ê';
            case 'euml': return 'ë';
            case 'igrave': return 'ì';
            case 'iacute': return 'í';
            case 'icirc': return 'î';
            case 'iuml': return 'ï';
            case 'eth': return 'ð';
            case 'ntilde': return 'ñ';
            case 'ograve': return 'ò';
            case 'oacute': return 'ó';
            case 'ocirc': return 'ô';
            case 'otilde': return 'õ';
            case 'ouml': return 'ö';
            case 'divide': return '÷';
            case 'oslash': return 'ø';
            case 'ugrave': return 'ù';
            case 'uacute': return 'ú';
            case 'ucirc': return 'û';
            case 'uuml': return 'ü';
            case 'yacute': return 'ý';
            case 'thorn': return 'þ';
            case 'yuml': return 'ÿ';
            case 'quot': return '"';
            case 'lt': return '<';
            case 'gt': return '>';
            default: return _;
        }
    });
};

JSON.flexibleParse = function (d){
    d = d.toString();

    try {
        return JSON.parse(d);
    } catch {
        var r;
        eval('r=' + d.toString().replace(/"(?:[^"\\]*(?:\\.)?)+"/g, function (_){
            return _.replace(/\r?\n/g, '\\n');
        }));
        return r;
    }
};

JSON.restoreDamaged = function (data, fields){
    data = data.toString().replace(/\r?\n|\r/g, '\n').trim();

    var result = {};
    for (var key, type in-object fields){
        var re = new RegExp(`(?:"\s*%0\s*"|'\s*%0\s*'|%0)\s*:\s*([\s\S]+)`(key));
        var m = data.match(re);
        if (re.test(data)){
            var d = RegExp.$1.trim();

            if (type !== 'multiline' && type !== 'array' && type !== 'pairsArray'){
                d = d.split('\n')[0].replace(/\s*,?\s*("\s*\w+\s*"|'\s*\w+\s*'|\w+)\s*:[\s\S]+|\s*}/, '');
            }

            d = d.replace(/(?:\n?\s*,?\s*("\s*\w+\s*"|'\s*\w+\s*'|\w+)\s*:|\s*})[\s\S]*$/, '');
            result[key] = d.trim().replace(/,$/, '');
        }
    }

    for (var key, value in-object result){
        if (fields[key] === 'string' || fields[key] === 'multiline'){
            result[key] = value === 'null' ? null : value.replace(/^['"]/, '').replace(/['"]$/, '').replace(/\\(?=")/g, '');
        }

        if (fields[key] === 'array' || fields[key] === 'pairsArray'){
            value = value.split(/\n|,/)
                .map(lambda arg.trim().replace(/^['"]/, '').replace(/['"]$/, ''))
                .filter(lambda (a, i) a && (i > 0 || a != '['));
            if (value[value.length - 1] === ']'){
                value.length--;
            }

            result[key] = value;
        }

        if (fields[key] === 'pairsArray'){
            result[key] = [];
            var last;
            value.forEach(lambda {
                if (arg === '[' || arg === ']') return;
                if (last){
                    last.push(arg);
                    last = null;
                } else {
                    result[key].push(last = [ arg ]);
                }
            });
        }

        if (fields[key] === 'number'){
            if (value === 'null'){
                value = null;
            } else {
                value = value.replace(/^['"]/, '').replace(/['"]$/, '');

                value = value.replace(/[liI]/g, '1').replace(/[oO]/g, '0');
                result[key] = +value;

                if (Number.isNaN(result[key])){
                    result[key] = +value.replace(/[^-.\d]+/g, '');
                }

                if (Number.isNaN(result[key])){
                    result[key] = +(value.replace(/[^\d]+/g, '') || '0');
                }
            }
        }
    }

    return result;
};
